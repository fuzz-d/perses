======================Reduction starts======================

The spar tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___aux_rule__declaration_3 {id=344,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=345,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=385,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=346,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=351,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:printf {id=381,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=353,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_15 {id=355,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |               |___Token:( {id=356,slot_type=LeftParen}
    |   |               |___parameterTypeList {id=359,slot_type=[altnt_block__directDeclarator_11,parameterTypeList]}
    |   |               |   |___parameterDeclaration {id=365,slot_type=[parameterList,parameterDeclaration]}
    |   |               |   |   |___(+) {id=366,slot_type=declarationSpecifiers}
    |   |               |   |   |   |___Token:const {id=380,slot_type=[declarationSpecifier,typeQualifier,Const]}
    |   |               |   |   |   |___Token:char {id=378,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
    |   |               |   |   |___(?) {id=368,slot_type=[altnt_block__parameterDeclaration_2,optional__typeName_1]}
    |   |               |   |       |___Token:* {id=373,slot_type=[abstractDeclarator,pointer,altnt_block__pointer_8,Star]}
    |   |               |   |___(?) {id=361,slot_type=optional__parameterTypeList_2}
    |   |               |       |___aux_rule__parameterTypeList_1 {id=362,slot_type=aux_rule__parameterTypeList_1}
    |   |               |           |___Token:, {id=363,slot_type=Comma}
    |   |               |           |___Token:... {id=364,slot_type=Ellipsis}
    |   |               |___Token:) {id=358,slot_type=RightParen}
    |   |___Token:; {id=347,slot_type=Semi}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=338,slot_type=declarationSpecifiers}
        |       |___Token:int {id=342,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=288,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=337,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=290,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=292,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=293,slot_type=LeftParen}
        |           |___parameterList {id=297,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList]}
        |           |   |___(+) {id=326,slot_type=[parameterDeclaration,declarationSpecifiers]}
        |           |   |   |___Token:int {id=336,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |           |   |   |___Token:argc {id=333,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
        |           |   |___(*) {id=299,slot_type=kleene_star__parameterList_1}
        |           |       |___aux_rule__parameterList_2 {id=300,slot_type=aux_rule__parameterList_2}
        |           |           |___Token:, {id=301,slot_type=Comma}
        |           |           |___parameterDeclaration {id=302,slot_type=parameterDeclaration}
        |           |               |___(+) {id=303,slot_type=declarationSpecifiers}
        |           |               |   |___Token:char {id=325,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
        |           |               |___declarator {id=305,slot_type=[altnt_block__parameterDeclaration_2,declarator]}
        |           |                   |___(?) {id=306,slot_type=optional__declarator_1}
        |           |                   |   |___Token:* {id=321,slot_type=[pointer,altnt_block__pointer_8,Star]}
        |           |                   |___directDeclarator {id=307,slot_type=directDeclarator}
        |           |                       |___Token:argv {id=317,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |           |                       |___(*) {id=309,slot_type=kleene_star__directDeclarator_7}
        |           |                           |___aux_rule__directDeclarator_14 {id=311,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
        |           |                               |___Token:[ {id=312,slot_type=LeftBracket}
        |           |                               |___Token:] {id=314,slot_type=RightBracket}
        |           |___Token:) {id=295,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=253,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=254,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=287,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=255,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=258,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=283,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=260,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=261,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=262,slot_type=Assign}
            |       |   |               |___Token:1 {id=280,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=256,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=207,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=208,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=251,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=209,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=212,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=247,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=214,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=215,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=216,slot_type=Assign}
            |       |   |               |___additiveExpression {id=228,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |                   |___Token:a {id=244,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=230,slot_type=kleene_star__additiveExpression_1}
            |       |   |                       |___aux_rule__additiveExpression_2 {id=231,slot_type=aux_rule__additiveExpression_2}
            |       |   |                           |___Token:+ {id=239,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                           |___Token:1 {id=238,slot_type=[multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=210,slot_type=Semi}
            |       |___expressionStatement {id=140,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=141,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=158,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=205,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=160,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=162,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=163,slot_type=LeftParen}
            |       |   |               |___(?) {id=164,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=166,slot_type=expression}
            |       |   |               |       |___(+) {id=203,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d\n" {id=204,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=168,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=169,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=170,slot_type=Comma}
            |       |   |               |               |___Token:b {id=187,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=165,slot_type=RightParen}
            |       |   |___Token:; {id=142,slot_type=Semi}
            |       |___expressionStatement {id=93,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=94,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=111,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=138,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=113,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=115,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=116,slot_type=LeftParen}
            |       |   |               |___(?) {id=117,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=136,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |___Token:"hello\n" {id=137,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=118,slot_type=RightParen}
            |       |   |___Token:; {id=95,slot_type=Semi}
            |       |___expressionStatement {id=46,slot_type=[aux_rule__blockItemList_2,statement,expressionStatement]}
            |       |   |___(?) {id=47,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=64,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression]}
            |       |   |       |___Token:printf {id=91,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=66,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=68,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=69,slot_type=LeftParen}
            |       |   |               |___(?) {id=70,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___(+) {id=89,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |___Token:"world\n" {id=90,slot_type=StringLiteral}
            |       |   |               |___Token:) {id=71,slot_type=RightParen}
            |       |   |___Token:; {id=48,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=44,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n");
        return 0;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n");
        return 0
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n");
        return  ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n");
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf("world\n"
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf(         )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
     printf "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n");
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n")
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf("hello\n"
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
     printf          )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b);
           (         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b)
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n", b ;
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n",  );
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf("%d\n"  b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf(      , b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
     printf "%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1;
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a + 1
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a +
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b = a
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int b
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
              int   =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a = 1
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a =  ;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int a   1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
         int   = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[])
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[]  {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv[ ) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *argv ]) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char *    []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc, char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc,           []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int argc  char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (int       char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int main            char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
    int      (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char*, ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ...)
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*, ... ;
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*,    );
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(const char*  ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const char , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf(           , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int       (const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n")
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           ("world\n"
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
           (
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(         )
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
     printf(
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b);
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n", b)
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n",
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b =
                     )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
                  b
            "%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a = 1;
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
             a =
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      []
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char      [   {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
        main                        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      , ...);
                        char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const      , ...)
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf(const      ,
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@2
    int printf(const           )
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int printf                 )
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    int        const           )
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    (const           )
             (          char        ) {
           ("%d\n"   )
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char        ) {
           ("%d\n"   )
           (
            "world\n"
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char        ) {
           ("%d\n"   )
           (
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char        ) {
           ("%d\n"   )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char        ) {
           ("%d\n"
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char        ) {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (          char
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    int printf(const           )
             (
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@3
    int printf(const           )
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@3
    int printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    int printf
                                      {
           (
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    int printf
                                      {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    int printf
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    int
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    int printf
                                      {
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    int printf
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    int
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@6
    int printf
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@6
    int
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@6
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@7
    int
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@7
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@8
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
                                      {
           (
            "world\n")
                ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
                                      {
           (
            "world\n")
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
                                      {
           (
            "world\n"
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
                                      {
           (
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
                                      {
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int printf
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    int
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: token slicer@1
    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    printf
                                      {
           (
            "world\n")
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    printf
                                      {
           (
            "world\n"
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    printf
                                      {
           (
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    printf
                                      {
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    printf
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@2
    (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    printf
                                      {
           (
            "world\n"
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    printf
                                      {
           (
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    printf
                                      {
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    printf
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@3
    "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    printf
                                      {
           (
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    printf
                                      {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    printf
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@4
    )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    printf
                                      {
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    printf
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@5
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@6
    printf
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@6
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@7
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
                                      {
           (
            "world\n")
                ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
                                      {
           (
            "world\n")
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
                                      {
           (
            "world\n"
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
                                      {
           (
                     )
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
                                      {
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    printf
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: token slicer@1
    {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    printf
                                      {
           (
            "world\n")
                ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    printf
                                      {
           (
            "world\n")
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    printf
                                      {
           (
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    printf
                                      {
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    printf
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@1
    {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@2
    printf
                                      {
           (
            "world\n")
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@2
    printf
                                      {
           (
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@2
    printf
                                      {
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@2
    printf
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@2
    (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@3
    printf
                                      {
           (
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@3
    printf
                                      {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@3
    printf
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@3
    "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@4
    printf
                                      {
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@4
    printf
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@4
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@5
    printf
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@5
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: line slicer@6
------------------------------------------------------------


==================Reducing node 2, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 4, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4
------------------------------------------------------------


==================Reducing node 6, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


==================Reducing node 60, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 60
------------------------------------------------------------


==================Reducing node 9, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 8, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: tree_slicer
    printf
                                      {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


==================Reducing node 7, size=7===================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


==================Reducing node 11, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: tree_slicer
    printf
                                      {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 14, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: tree_slicer
    printf
                                      {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 14
------------------------------------------------------------


==================Reducing node 16, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 16
------------------------------------------------------------


==================Reducing node 15, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: tree_slicer
    printf
                                      {
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 15
------------------------------------------------------------


==================Reducing node 34, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: tree_slicer
    printf
                                      {
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 34
------------------------------------------------------------


==================Reducing node 36, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 36
------------------------------------------------------------


==================Reducing node 37, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


==================Reducing node 56, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 56
------------------------------------------------------------


==================Reducing node 38, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 38
------------------------------------------------------------


==================Reducing node 57, size=7==================

The current best program is the following

    printf
                                      {
           (
            "world\n")
                ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 57
------------------------------------------------------------


#test success = 34
#test failure = 133
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
